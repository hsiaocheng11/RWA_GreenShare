# FILE: .github/workflows/ci.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  NODE_VERSION: '18'
  RUST_VERSION: '1.75'

jobs:
  # Lint and Type Check
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install pnpm
      run: npm install -g pnpm

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run ESLint
      run: pnpm lint

    - name: Run TypeScript type check
      run: pnpm type-check

    - name: Check Prettier formatting
      run: pnpm format:check

  # Rust Tests
  rust-tests:
    name: Rust Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
        components: rustfmt, clippy

    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev libpq-dev

    - name: Check Rust formatting
      run: cargo fmt --all -- --check

    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run Rust tests
      run: cargo test --verbose

    - name: Build Rust project
      run: cargo build --release

  # Sui Move Tests
  sui-move-tests:
    name: Sui Move Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Sui CLI
      run: |
        curl -fLJO https://github.com/MystenLabs/sui/releases/download/testnet-v1.14.2/sui-testnet-v1.14.2-ubuntu-x86_64.tgz
        tar -xzf sui-testnet-v1.14.2-ubuntu-x86_64.tgz
        sudo mv sui-testnet-v1.14.2-ubuntu-x86_64/sui /usr/local/bin/
        sudo chmod +x /usr/local/bin/sui

    - name: Verify Sui installation
      run: sui --version

    - name: Run Sui Move tests
      run: sui move test

    - name: Build Sui Move packages
      run: sui move build

  # Solidity Tests
  solidity-tests:
    name: Solidity Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Foundry
      uses: foundry-rs/foundry-toolchain@v1

    - name: Install dependencies
      run: forge install

    - name: Check Solidity formatting
      run: forge fmt --check

    - name: Run Solidity tests
      run: forge test -vvv

    - name: Generate gas report
      run: forge test --gas-report

    - name: Build contracts
      run: forge build

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install pnpm
      run: npm install -g pnpm

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run unit tests
      run: pnpm test

    - name: Run component tests
      run: pnpm test:components

    - name: Build frontend
      run: pnpm build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      if: success()
      with:
        name: frontend-build
        path: .next/

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [rust-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: greenshare_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}

    - name: Install pnpm
      run: npm install -g pnpm

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Setup test environment
      run: |
        cp .env.example .env.test
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/greenshare_test" >> .env.test
        echo "REDIS_URL=redis://localhost:6379" >> .env.test

    - name: Run storage integration tests
      run: pnpm test:storage

    - name: Run API integration tests
      run: pnpm test:integration

    - name: Run end-to-end tests
      run: pnpm test:e2e

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}

    - name: Install pnpm
      run: npm install -g pnpm

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run npm audit
      run: pnpm audit

    - name: Run Rust security audit
      run: |
        cargo install cargo-audit
        cargo audit

    - name: Install Foundry
      uses: foundry-rs/foundry-toolchain@v1

    - name: Run Slither analysis
      uses: crytic/slither-action@v0.3.0
      continue-on-error: true
      with:
        node-version: ${{ env.NODE_VERSION }}

  # Docker Build
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, rust-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build ROFL Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.rofl
        push: false
        tags: greenshare/rofl-enclave:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build Walrus Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.walrus
        push: false
        tags: greenshare/mock-walrus:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.frontend
        target: runner
        push: false
        tags: greenshare/frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker Compose
      run: |
        docker-compose -f docker-compose.yml config
        docker-compose -f docker-compose.yml up -d --build
        sleep 30
        docker-compose -f docker-compose.yml ps
        docker-compose -f docker-compose.yml logs
        docker-compose -f docker-compose.yml down

  # Deployment (only on main branch)
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, security-audit, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://staging.greenshare.energy

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup deployment environment
      run: |
        echo "Setting up deployment environment..."
        # Add deployment secrets and configurations

    - name: Install Sui CLI
      run: |
        curl -fLJO https://github.com/MystenLabs/sui/releases/download/testnet-v1.14.2/sui-testnet-v1.14.2-ubuntu-x86_64.tgz
        tar -xzf sui-testnet-v1.14.2-ubuntu-x86_64.tgz
        sudo mv sui-testnet-v1.14.2-ubuntu-x86_64/sui /usr/local/bin/
        sudo chmod +x /usr/local/bin/sui

    - name: Install Foundry
      uses: foundry-rs/foundry-toolchain@v1

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install pnpm
      run: npm install -g pnpm

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run deployment script
      env:
        SUI_PRIVATE_KEY: ${{ secrets.SUI_PRIVATE_KEY }}
        ZIRCUIT_PRIVATE_KEY: ${{ secrets.ZIRCUIT_PRIVATE_KEY }}
        CELO_PRIVATE_KEY: ${{ secrets.CELO_PRIVATE_KEY }}
        SUI_NETWORK: testnet
        ZIRCUIT_RPC_URL: ${{ secrets.ZIRCUIT_RPC_URL }}
        CELO_RPC_URL: ${{ secrets.CELO_RPC_URL }}
      run: |
        chmod +x scripts/deploy-all.sh
        ./scripts/deploy-all.sh --all --skip-tests

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v3
      with:
        name: deployment-artifacts
        path: deployments/

    - name: Notify deployment success
      run: |
        echo "✅ Deployment to staging completed successfully!"
        echo "🔗 Staging URL: https://staging.greenshare.energy"

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, rust-tests, sui-move-tests, solidity-tests, frontend-tests, integration-tests, security-audit, docker-build]
    if: always()
    
    steps:
    - name: Check job results
      run: |
        echo "CI Pipeline Results:"
        echo "===================="
        echo "Lint & Type Check: ${{ needs.lint-and-typecheck.result }}"
        echo "Rust Tests: ${{ needs.rust-tests.result }}"
        echo "Sui Move Tests: ${{ needs.sui-move-tests.result }}"
        echo "Solidity Tests: ${{ needs.solidity-tests.result }}"
        echo "Frontend Tests: ${{ needs.frontend-tests.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"
        echo "Security Audit: ${{ needs.security-audit.result }}"
        echo "Docker Build: ${{ needs.docker-build.result }}"
        
        if [[ "${{ needs.lint-and-typecheck.result }}" == "success" && 
              "${{ needs.rust-tests.result }}" == "success" && 
              "${{ needs.sui-move-tests.result }}" == "success" && 
              "${{ needs.solidity-tests.result }}" == "success" && 
              "${{ needs.frontend-tests.result }}" == "success" && 
              "${{ needs.integration-tests.result }}" == "success" && 
              "${{ needs.docker-build.result }}" == "success" ]]; then
          echo "🎉 All CI checks passed!"
        else
          echo "❌ Some CI checks failed"
          exit 1
        fi