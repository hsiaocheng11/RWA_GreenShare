// FILE: src/seed.ts
import { generateKeyPair } from './crypto';
import fs from 'fs';
import path from 'path';

/**
 * Generate sample keys and .env file for development
 */
function generateSeedData(): void {
  console.log('🌱 Generating seed data for Smart Meter Simulator...');

  // Generate ECDSA key pair
  const { privateKey, publicKey } = generateKeyPair();
  
  // Create PEM format private key (simplified format for demo)
  const pemPrivateKey = `-----BEGIN PRIVATE KEY-----
${Buffer.from(privateKey, 'hex').toString('base64')}
-----END PRIVATE KEY-----`;

  // Generate sample environment variables
  const envContent = `# GreenShare Smart Meter Simulator Configuration
# Auto-generated by npm run seed

# ROFL Enclave Endpoint
ROFL_ENDPOINT=http://localhost:8080

# Meter Identity & Cryptography  
METER_ID=meter_${Math.random().toString(36).substr(2, 8)}
METER_PRIVATE_KEY_PEM="${pemPrivateKey.replace(/\n/g, '\\n')}"

# Simulation Parameters
INTERVAL_MS=15000
KWH_MIN=0.1
KWH_MAX=2.5

# Generated Keys (for reference)
# Public Key: ${publicKey}
# Private Key: ${privateKey}
`;

  // Write to .env file
  const envPath = path.join(process.cwd(), '.env');
  fs.writeFileSync(envPath, envContent);
  
  console.log('✅ Seed data generated successfully:');
  console.log(`   📁 File: ${envPath}`);
  console.log(`   🔑 Meter ID: meter_${Math.random().toString(36).substr(2, 8)}`);
  console.log(`   🔐 Keys generated and stored in PEM format`);
  console.log(`   🎯 Default endpoint: http://localhost:8080`);
  console.log('\n📋 Next steps:');
  console.log('   1. Update ROFL_ENDPOINT in .env if needed');
  console.log('   2. Run: npm run dev');
  console.log('   3. Start your ROFL enclave at the configured endpoint');
}

// Run seed generation
if (require.main === module) {
  try {
    generateSeedData();
  } catch (error) {
    console.error('❌ Failed to generate seed data:', (error as Error).message);
    process.exit(1);
  }
}

export { generateSeedData };